#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (C) 2016-2017 Niccolo Rigacci

# Get BME280 sensors value (pressure, temperature and humidity).
# Results are written to a cache file and read from it if fresh enough.
#
# Usage: bme280-snmp
#        bme280-snmp {temperature|pressure|humidity}

from __future__ import print_function
from future import standard_library
standard_library.install_aliases()
from builtins import str
from builtins import range
import os, os.path, pickle, sys, board, time
from adafruit_bme280 import advanced as adafruit_bme280

NAME = os.path.basename(sys.argv[0])
BME280_STATUS = '/var/run/bme280.status'
CFG_FILE = '/etc/airpi/airpi.cfg'
READ_SAMPLES = 7
MAX_CACHE_SECONDS = 20

#-------------------------------------------------------------------------
# Get values from BME280 sensors (temperature, pressure, humidity).
#-------------------------------------------------------------------------
def readBME280All(sensor, samples):
    t = p = h = 0
    for i in range(0, samples):
        degrees = sensor.read_temperature()
        hectopascals = (sensor.read_pressure() / 100.0)
        humidity = sensor.read_humidity()
        #print 'Timestamp: {0:0.3f}'.format(sensor.t_fine)
        #print "Temperature (°C): {0:0.3f}".format(degrees)
        #print "Pressure (hPa): {0:0.2f}".format(hectopascals)
        #print "Humidity (%): {0:0.2f}".format(humidity)
        t += degrees
        p += hectopascals
        h += humidity
        time.sleep(0.1);
    return t / float(samples), p / float(samples), h / float(samples)

#-------------------------------------------------------------------------
# Main.
#-------------------------------------------------------------------------
temperature, pressure, humidity = (None, None, None)
if len(sys.argv) < 2: interactive = True
else: interactive = False

# Read data from cache, if it exists and if it is fresh enough.
try:
    if os.path.isfile(BME280_STATUS):
        st = os.stat(BME280_STATUS)
        if (time.time() - st.st_mtime) <= MAX_CACHE_SECONDS:
            with open(BME280_STATUS, 'rb') as f:
                temperature, pressure, humidity = pickle.load(f)
except Exception as e:
    if interactive:
        print("WARNING: %s: Cannot read values from status file: %s" % (NAME, str(e)))

if temperature == None or pressure == None or humidity == None:
    # Read from cache failed, get a real measurement.
    import configparser
    DEFAULTS = { 'I2C_ADDRESS': '0x77' }
    config = configparser.RawConfigParser(DEFAULTS)
    config.read(CFG_FILE)
    if not config.has_section('bme280'):
        config.add_section('bme280')
    I2C_ADDRESS = int(config.get('bme280', 'I2C_ADDRESS'), 0)
    try:
        i2c = board.I2C()
        sensor = adafruit_bme280.Adafruit_BME280_I2C(i2c, address=I2C_ADDRESS)
        sensor.overscan_humidity = adafruit_bme280.OVERSCAN_X16
        sensor.overscan_pressure = adafruit_bme280.OVERSCAN_X16
        sensor.overscan_temperature = adafruit_bme280.OVERSCAN_X16
        temperature, pressure, humidity = (sensor.temperature, sensor.pressure, sensor.relative_humidity)
    except Exception as e:
        print("ERROR: %s: Cannot read values from sensor: %s" % (NAME, str(e)))
        sys.exit(1)

    try:
        with open(BME280_STATUS, 'wb') as f:
            pickle.dump([temperature, pressure, humidity], f)
    except Exception as e:
        if interactive:
            print("WARNING: %s: Cannot write status file: %s" % (NAME, str(e)))

if interactive:
    print("Temperature (°C): {0:0.3f}".format(temperature))
    print("Pressure (hPa): {0:0.2f}".format(pressure))
    print("Humidity (%): {0:0.2f}".format(humidity))
elif sys.argv[1] == 'temperature':
    print("%d" % (int(float(temperature) * 1000)))
elif sys.argv[1] == 'pressure':
    print("%d" % (int(float(pressure) * 1000)))
elif sys.argv[1] == 'humidity':
    print("%d" % (int(float(humidity) * 1000)))
else:
    print("Usage: %s [temperature|pressure|humidity]" % (NAME,))
    sys.exit(1)
